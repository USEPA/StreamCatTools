[{"path":"https://usepa.github.io/StreamCatTools/articles/Applications.html","id":"plotting-watershed-data","dir":"Articles","previous_headings":"","what":"Plotting watershed data","title":"Applications","text":"example access single variable Calapooia River using sc_get_data function. use nhdplusTools library grab flowlines watershed Calapooia, plot selected StreamCat metric Calapooia River show watershed.","code":"library(StreamCatTools) start_comid = 23763517 nldi_feature <- list(featureSource = \"comid\", featureID = start_comid)  flowline_nldi <- nhdplusTools::navigate_nldi(nldi_feature, mode = \"UT\", data_source = \"flowlines\", distance=5000)  # get StreamCat metrics df <- sc_get_data(metric='pctimp2011', aoi='cat', comid=flowline_nldi$UT_flowlines$nhdplus_comid)  # We can also pull out comids the following way: # comids <- paste(as.integer(flowline_nldi$UT_flowlines$nhdplus_comid), collapse=\",\",sep=\"\") # df <- sc_get_data(metric='pctimp2011', aoi='cat', comid=comids)  flowline_nldi <- flowline_nldi$UT_flowlines flowline_nldi$PCTIMP2011CAT <- df$pctimp2011cat[match(flowline_nldi$nhdplus_comid, df$comid)]  basin <- nhdplusTools::get_nldi_basin(nldi_feature = nldi_feature) library(mapview) mapview::mapviewOptions(fgb=FALSE) mapview::mapview(basin, alpha.regions=.08) + mapview::mapview(flowline_nldi, zcol = \"PCTIMP2011CAT\", legend = TRUE)"},{"path":"https://usepa.github.io/StreamCatTools/articles/Applications.html","id":"working-with-nars-data","dir":"Articles","previous_headings":"","what":"Working with NARS data","title":"Applications","text":"example demonstrate data ‘mashup’ grabbing NRSA data EPA National Aquatic Resource Surveys (NARS) website directly R, pull particular StreamCat metrics sites using sc_get_data, compare landscape metrics NRSA metrics","code":"nrsa <- readr::read_csv(\"https://www.epa.gov/sites/production/files/2015-09/siteinfo_0.csv\")  dplyr::glimpse(nrsa)  # Promote data frame to sf spatial points data frame nrsa_sf <- sf::st_as_sf(nrsa, coords = c(\"LON_DD83\", \"LAT_DD83\"), crs = 4269)  # Get COMIDs using nhdplusTools package # nrsa$COMID<- NA # for (i in 1:nrow(nrsa_sf)){ #   print (i) #   nrsa_sf[i,'COMID'] <- discover_nhdplus_id(nrsa_sf[i,c('geometry')]) # } load(system.file(\"extdata\", \"sample_nrsa_data.rda\", package=\"StreamCatTools\"))  # get particular StreamCat data for all these NRSA sites # nrsa_sf$COMID <- as.character(nrsa_sf$COMID) comids <- nrsa_sf$COMID comids <- comids[!is.na(comids)] comids <- comids[c(1:700)] comids <- paste(comids,collapse=',') df <- sc_get_data(metric='pctcrop2006', aoi='ws', comid=comids)  # glimpse(df) df$COMID <- as.integer(df$comid) nrsa_sf <- dplyr::left_join(nrsa_sf, df, by='COMID') # download mmi from NARS web page library(dplyr) library(ggplot2) mmi <- readr::read_csv(\"https://www.epa.gov/sites/production/files/2015-09/bentcond.csv\") # dplyr::glimpse(mmi)  # join mmi to NARS info data frame with StreamCat PctCrop metric nrsa_sf <- dplyr::left_join(nrsa_sf, mmi[,c('SITE_ID','BENT_MMI_COND')], by='SITE_ID') bxplt <- nrsa_sf %>%    tidyr::drop_na(BENT_MMI_COND) %>%   ggplot2::ggplot(aes(x=pctcrop2006ws, y=BENT_MMI_COND))+   ggplot2::geom_boxplot()+   ggplot2::ggtitle('NRSA Benthic MMI versus % Crop in Watershed from 2006 NLCD') suppressWarnings(print(bxplt))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"installing-and-loading-streamcattools","dir":"Articles","previous_headings":"","what":"Installing and loading StreamCatTools","title":"Getting Started","text":"install, currently need install GitHub using devtools installing load library","code":"library(devtools) install_github('USEPA/StreamCatTools') library(StreamCatTools)"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Getting Started","text":"StreamCatTools package designed simplify use StreamCat data R, leveraging new API StreamCat.","code":""},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"streamcat-api","dir":"Articles","previous_headings":"","what":"StreamCat API","title":"Getting Started","text":"can pull data R StreamCat API simply passing URL extract json. hard-wire parameters though limited number records returned GET request.","code":"res <- jsonlite::fromJSON(\"https://api.epa.gov/StreamCat/streams/metrics?name=fert&areaOfInterest=cat&comid=179\") res$items #>   fertws fertcat comid #> 1  1.438   1.438   179"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"list-api-parameters","dir":"Articles","previous_headings":"","what":"List API parameters","title":"Getting Started","text":"List StreamCat parameters: Get list available StreamCat values certain parameters using sc_get_params function via API can also see metrics available areas interest years using sc_get_params function (returns tibble information StreamCat metrics): can look display name names metric using sc_fullname function via API can additionally get data frame state FIPS codes, abbreviations names, information counties well using sc_get_params:","code":"region_params <- sc_get_params(param='aoi')  name_params <- sc_get_params(param='metric_names')  print(paste0('region parameters are: ', paste(region_params,collapse = ', '))) #> [1] \"region parameters are: cat, catrp100, other, ws, wsrp100\" print(paste0('A selection of available StreamCat metrics include: ',paste(name_params[1:10],collapse = ', '))) #> [1] \"A selection of available StreamCat metrics include: agkffact, al2o3, bankfulldepth, bankfullwidth, bfi, canaldens, cao, cbnf, chem, clay\" var_info <- sc_get_params(param='variable_info') head(var_info) #> # A tibble: 6 × 13 #>   category     metric aoi   year  short_description long_description units  dsid #>   <chr>        <chr>  <chr> <chr> <chr>             <chr>            <chr> <dbl> #> 1 Anthropogen… NABD_… Cat,… NA    NABD Dam Density  Density of geor… Coun…    33 #> 2 Anthropogen… NABD_… Cat,… NA    NABD NID Reservo… Volume all rese… Cubi…    33 #> 3 Anthropogen… NABD_… Cat,… NA    NABD Normal Rese… Volume all rese… Cubi…    33 #> 4 Natural      Preci… Cat,… NA    Surplus Precipit… This dataset re… Kilo…    75 #> 5 Soils        Rckde… Cat,… NA    Mean Bedrock Dep… Mean depth (cm)… Cent…    56 #> 6 Soils        agkff… Cat,… NA    Ag Soil Erodibil… Mean of STATSGO… Unit…    28 #> # ℹ 5 more variables: dataset <chr>, source_name <chr>, source_URL <chr>, #> #   ACTIVE <dbl>, DSNAME <chr> metric='pcthbwet2011' fullname <- sc_fullname(metric) fullname #> [1] \"Herbaceous Wetland Percentage 2011\" metric='pctdecid2019,fert' fullname <- sc_fullname(metric) fullname #> character(0) states <- sc_get_params(param='state') head(states) #>    st_fips st_abbr     st_name #> 30      01      AL     Alabama #> 8       04      AZ     Arizona #> 25      05      AR    Arkansas #> 6       06      CA  California #> 15      08      CO    Colorado #> 50      09      CT Connecticut counties <- sc_get_params(param='county') head(counties) #>      fips state    county_name #> 752 01001    AL Autauga County #> 713 01003    AL Baldwin County #> 655 01005    AL Barbour County #> 755 01007    AL    Bibb County #> 748 01009    AL  Blount County #> 656 01011    AL Bullock County"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"filter-metric-information-by-criteria","dir":"Articles","previous_headings":"","what":"Filter metric information by criteria","title":"Getting Started","text":"can also filter metric names information metric year(s), indicator categories metrics, metric data set names, Areas Interest metrics available .","code":"metrics <- sc_get_metric_names(category = c('Deposition','Climate'),aoi=c('Cat','Ws')) head(metrics) #> # A tibble: 6 × 9 #>   Category Metric AOI   Year  Short_Name Metric_Description Units Source Dataset #>   <chr>    <chr>  <chr> <chr> <chr>      <chr>              <chr> <chr>  <chr>   #> 1 Climate  bfi[A… Cat,… NA    Base Flow… Base flow is the … Perc… USGS … Base F… #> 2 Deposit… inorg… Cat,… 2008  Mean Annu… Annual gradient m… Kilo… NADP   NADP    #> 3 Deposit… nh4[Y… Cat,… 2008  Mean annu… Annual gradient m… Kilo… NADP   NADP    #> 4 Deposit… no3[Y… Cat,… 2008  Mean Annu… Annual gradient m… Kilo… NADP   NADP    #> 5 Climate  preci… Cat,… NA    30-year M… PRISM climate dat… Mill… PRISM  PRISM   #> 6 Climate  preci… Cat,… 1991… 30-year M… PRISM climate dat… Mill… PRISM  PRISM"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-data-for-comids","dir":"Articles","previous_headings":"","what":"Get data for COMIDs","title":"Getting Started","text":"example access several variables, several areas interest, several COMIDs using sc_get_data function. Loads data tibble can view.","code":"df <- sc_get_data(metric='pcturbmd2006,damdens,tridens', aoi='rp100cat,cat,ws', comid='179,1337,1337420') knitr::kable(df)"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-data-for-county","dir":"Articles","previous_headings":"","what":"Get data for county","title":"Getting Started","text":"example access couple variables watershed scale area interest county (Benton County case) using sc_get_data function.","code":"df <- sc_get_data(metric='pctwdwet2006', aoi='ws', county='41003') knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-all-metrics-for-comids-or-an-area-of-interest","dir":"Articles","previous_headings":"","what":"Get all metrics for COMIDs or an Area of Interest","title":"Getting Started","text":"can also get StreamCat metrics set COMIDs area interest. Please request metric=‘’ aoi=‘conus’ order overload requests server. Requesting metric=‘’ state multiple states hydroregions also take long time process.","code":"df <- sc_get_data(comid='179', aoi='cat', metric='all') knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-nlcd-data","dir":"Articles","previous_headings":"","what":"Get NLCD data","title":"Getting Started","text":"example access National Land Cover Dataset (NLCD) data 2001, just catchment level several COMIDs using sc_nlcd function. Loads data tibble can view. can also pass couple years different area interest another region like county.","code":"df <- sc_nlcd(year='2001', aoi='cat',               comid='179,1337,1337420') knitr::kable(df) df <- sc_nlcd(year='2006, 2019', aoi='ws',               county='41003') knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-comids","dir":"Articles","previous_headings":"","what":"Get COMIDs","title":"Getting Started","text":"example use sc_get_comid function find COMIDs USGS stream gages load R. use .csv file coordinate columns known coordinate reference system.","code":"gages = readr::read_csv(system.file(\"extdata\",\"Gages_flowdata.csv\", package = \"StreamCatTools\"),show_col_types = FALSE) # we'll just grab a few variables to keep things simple gages <- gages[,c('SOURCE_FEA','STATION_NM','LON_SITE','LAT_SITE')] gages_coms <- sc_get_comid(gages, xcoord='LON_SITE',                   ycoord='LAT_SITE', crsys=4269)  # Add the COMID we found back to gages data frame gages$COMID <- strsplit(gages_coms, \",\")[[1]] df <- sc_get_data(metric='huden2010', aoi='ws', comid=gages_coms) df$COMID <- as.character(df$comid) gages <- dplyr::left_join(gages, df, by='COMID') knitr::kable(head(gages))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-data-for-a-hydroregion","dir":"Articles","previous_headings":"","what":"Get data for a hydroregion","title":"Getting Started","text":"example access couple watershed-metrics particular NHDPlus hydroregion using sc_get_data function.","code":"df <- sc_get_data(metric='pctwdwet2006', aoi='ws', region='Region17') knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/Introduction.html","id":"get-data-for-conus","dir":"Articles","previous_headings":"","what":"Get data for CONUS","title":"Getting Started","text":"example access metric conus using sc_get_data function - shown demonstration run takes bit time","code":"# df <- sc_get_data(metric='om', aoi='ws', conus='true') # knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"accessing-and-working-with-lakecat","dir":"Articles","previous_headings":"","what":"Accessing and working with LakeCat","title":"Working with LakeCat data","text":"StreamCatTools package designed simplify use StreamCat data R, leveraging new API StreamCat. now functionality StreamCat API accessing working LakeCat data added functions StreamCatTools access LakeCata data R using API. can actually pull data R LakeCat simply passing URL extract json. hard-wire parameters limited number records returned GET request.","code":"res <- jsonlite::fromJSON(\"https://api.epa.gov/StreamCat/lakes/metrics?name=pcturbmd2006&areaOfInterest=cat&comid=22538788\") res$items"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"list-lakecat-api-parameters","dir":"Articles","previous_headings":"","what":"List LakeCat API parameters","title":"Working with LakeCat data","text":"List LakeCat parameters: Get list available LakeCat values certain parameters using lc_get_params function (right now just metric names areas interest function) via API can also see metrics available areas interest years using sc_get_params function (returns tibble information StreamCat metrics): Look display name names metric using lc_fullname function via API","code":"library(StreamCatTools) region_params <- lc_get_params(param='aoi')  name_params <- lc_get_params(param='metric_names')  print(paste0('region parameters are: ', paste(region_params,collapse = ', '))) #> [1] \"region parameters are: cat, ws\" print(paste0('A selection of available LakrCat metrics include: ',paste(name_params[1:10],collapse = ', '))) #> [1] \"A selection of available LakrCat metrics include: agkffact, al2o3, bfi, canaldens, cao, cbnf, clay, coalminedens, compstrgth, damdens\" var_info <- lc_get_params(param='variable_info') head(var_info) #> # A tibble: 6 × 13 #>   category     metric aoi   year  short_description long_description units  dsid #>   <chr>        <chr>  <chr> <chr> <chr>             <chr>            <chr> <dbl> #> 1 Soils        agkff… Cat,… NA    Ag Soil Erodibil… Mean of STATSGO… Unit…    10 #> 2 Natural      al2o3… Cat,… NA    Mean Lithologica… Mean % of litho… Perc…    11 #> 3 Base         areas… Ws    NA    Watershed Area S… Watershed area … Squa…    NA #> 4 Climate      bfi[A… Cat,… NA    Base Flow Index   Base flow is th… Perc…    12 #> 5 Anthropogen… canal… Cat,… NA    Canal Density     Density of NHDP… Kilo…    13 #> 6 Natural      cao[A… Cat,… NA    Mean Lithologica… Mean % of litho… Perc…    11 #> # ℹ 5 more variables: dataset <chr>, source_name <chr>, source_URL <chr>, #> #   ACTIVE <dbl>, DSNAME <chr> metric='pcthbwet2016' fullname <- lc_fullname(metric) fullname #> [1] \"Herbaceous Wetland Percentage 2016\" metric=c('pctdecid2019','fert') fullname <- lc_fullname(metric) fullname #> [1] \"Deciduous Forest Percentage 2019\"                    #> [2] \"Synthetic Nitrogen Fertilizer Application Mean Rate\""},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"filter-metric-information-by-criteria","dir":"Articles","previous_headings":"","what":"Filter metric information by criteria","title":"Working with LakeCat data","text":"can also filter metric names information metric year(s), indicator categories metrics, metric data set names, Areas Interest metrics available .","code":"metrics <- lc_get_metric_names(category = c('Anthropogenic','Natural'), aoi=c('Cat','Ws')) head(metrics) #> # A tibble: 6 × 9 #>   Category Metric AOI   Year  Short_Name Metric_Description Units Source Dataset #>   <chr>    <chr>  <chr> <chr> <chr>      <chr>              <chr> <chr>  <chr>   #> 1 Natural  al2o3… Cat,… NA    Mean Lith… Mean % of litholo… Perc… USGS … USGS G… #> 2 Anthrop… canal… Cat,… NA    Canal Den… Density of NHDPlu… Kilo… Falco… Canal … #> 3 Natural  cao[A… Cat,… NA    Mean Lith… Mean % of litholo… Perc… USGS … USGS G… #> 4 Anthrop… cbnf[… Cat,… NA    Cultivate… Mean rate of biol… Kilo… Envir… Agricu… #> 5 Anthrop… coalm… Cat,… NA    Coal Mine… Density of coal m… Coun… USGS … Coal M… #> 6 Natural  comps… Cat,… NA    Mean Lith… Mean lithological… Perc… USGS … USGS G…"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"get-waterbody-comids","dir":"Articles","previous_headings":"","what":"Get Waterbody COMIDs","title":"Working with LakeCat data","text":"example use lc_get_comid function find COMIDs set example lake locations load R.lc_get_comid just simple wrapper get_waterbodies nhdplusTools R package. can use COMIDs derive lake locations get LakeCat metrics lakes show .","code":"dd <- data.frame(x = c(-89.198,-114.125,-122.044),                  y = c(45.502,47.877,43.730)) |>    sf::st_as_sf(coords = c('x', 'y'), crs = 4326)      comids <- lc_get_comid(dd)"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"get-data-for-comids","dir":"Articles","previous_headings":"","what":"Get data for COMIDs","title":"Working with LakeCat data","text":"example access several variables, several areas interest, several COMIDs using lc_get_data function. ’ll show using COMIDS derived lc_get_comid function previous chunk well known COMIDS NHDPlus waterbodies. Loads data tibble can view.","code":"df <- lc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid=comids) knitr::kable(df) df <- lc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='23783629,23794487,23812618') knitr::kable(df)"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"get-data-for-county","dir":"Articles","previous_headings":"","what":"Get data for county","title":"Working with LakeCat data","text":"example access couple variables watershed scale area interest county (Benton County case) using sc_get_data function.","code":"df <- lc_get_data(metric='pctwdwet2006', aoi='ws', county='41003') knitr::kable(head(df))"},{"path":"https://usepa.github.io/StreamCatTools/articles/LakeCat.html","id":"get-nlcd-data","dir":"Articles","previous_headings":"","what":"Get NLCD data","title":"Working with LakeCat data","text":"example access National Land Cover Dataset (NLCD) data 2019, just catchment level several COMIDs using lc_nlcd function. Loads data tibble can view.","code":"df <- lc_nlcd(comid='23783629,23794487,23812618', year='2019', aoi='ws') knitr::kable(df)"},{"path":"https://usepa.github.io/StreamCatTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Weber. Author, maintainer. Ryan Hill. Contributor. Travis Hudson. Contributor. Allen Brookes. Contributor. David Rebhuhn. Contributor. Michael Dumelle. Contributor. Zachary Smith. Contributor.","code":""},{"path":"https://usepa.github.io/StreamCatTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weber M (2025). StreamCatTools: 'StreamCatTools'. R package version 0.9.0, https://github.com/USEPA/StreamCatTools, https://usepa.github.io/StreamCatTools/.","code":"@Manual{,   title = {StreamCatTools: 'StreamCatTools'},   author = {Marc Weber},   year = {2025},   note = {R package version 0.9.0, https://github.com/USEPA/StreamCatTools},   url = {https://usepa.github.io/StreamCatTools/}, }"},{"path":[]},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"streamcattools-tools-to-work-with-the-streamcat-api-within-r-and-access-the-full-suite-of-streamcat-and-lakecat-metrics","dir":"","previous_headings":"","what":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","title":"StreamCatTools","text":"StreamCatTools R package accessing StreamCat LakeCat data via StreamCat API working site data conjunction StreamCat NHDPlus.","code":""},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"installation","dir":"","previous_headings":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","what":"Installation","title":"StreamCatTools","text":"can install load recent approved version CRAN running can install load recent development version GitHub running: view vignettes RStudio, run","code":"# install the most recent approved version from CRAN install.packages(\"StreamCatTools\") # load the most recent approved version from CRAN library(StreamCatTools) library(remotes) install_github(\"USEPA/StreamCatTools\", build_vignettes=TRUE) library(StreamCatTools) vignette(\"Introduction\", \"StreamCatTools\") vignette(\"Applications\", \"StreamCatTools\") vignette(\"LakeCat\", \"StreamCatTools\")"},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"contributing","dir":"","previous_headings":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","what":"Contributing","title":"StreamCatTools","text":"Contributions development package welcome encouraged. Please consider following guidlelines contributing StreamCatTools: encourage package users submit bugs enhancement requests submitting issues - see Quickstart GitHub Issues page new GitHub issues Contributions use standard GitHub fork - pull-request workflow encourage use tidyverse style guide contributions Contributions ideally tested using testthat Make sure use roxygen run Check contributing contribute documentation, running devtools::document() pkgdown::build_site() refresh help docs pkgdown pages (push packagedown changes - verify changes locally)","code":""},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"python-implementation-of-streamcat-api","dir":"","previous_headings":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","what":"Python Implementation of StreamCat API","title":"StreamCatTools","text":"PyNHD, part HyRiver suite Python packages, also provides access StreamCat data via API Python, along NHDPlus value-added attributes catchments catchment network accumulated values catchments available via USGS ScienceBase","code":""},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"recommended-citation","dir":"","previous_headings":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","what":"Recommended Citation:","title":"StreamCatTools","text":"","code":"Weber, Marc H, Hill, Ryan A., Brookes, Allen F. 2024, StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics,   https://usepa.github.io/StreamCatTools"},{"path":"https://usepa.github.io/StreamCatTools/index.html","id":"disclaimer","dir":"","previous_headings":"StreamCatTools: Tools to work with the StreamCat API within R and access the full suite of StreamCat and LakeCat metrics.","what":"Disclaimer","title":"StreamCatTools","text":"United States Environmental Protection Agency (EPA) GitHub project code provided “” basis user assumes responsibility use. EPA relinquished control information longer responsibility protect integrity , confidentiality, availability information. reference specific commercial products, processes, services service mark, trademark, manufacturer, otherwise, constitute imply endorsement, recommendation favoring EPA. EPA seal logo shall used manner imply endorsement commercial product activity EPA United States Government.","code":""},{"path":[]},{"path":"https://usepa.github.io/StreamCatTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://usepa.github.io/StreamCatTools/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Full Metric Name — lc_fullname","title":"Lookup Full Metric Name — lc_fullname","text":"Function retrieve full metric name based short name using LakeCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Full Metric Name — lc_fullname","text":"","code":"lc_fullname(metric = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Full Metric Name — lc_fullname","text":"metric Short metric name Syntax: metric=value1 Values: metric","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Full Metric Name — lc_fullname","text":"lookup full name given LakeCat metric","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lookup Full Metric Name — lc_fullname","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_fullname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Full Metric Name — lc_fullname","text":"","code":"fullname <- lc_fullname(metric='clay')"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Lake COMIDs — lc_get_comid","title":"Get Lake COMIDs — lc_get_comid","text":"Function return NHDPlusV2 Waterbody COMIDS using either dataframe coordinates specified CRS sf object.  function generates vector NHDPlus Waterbody COMID values user can pass lc_get_data function","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Lake COMIDs — lc_get_comid","text":"","code":"lc_get_comid(   dd = NULL,   xcoord = NULL,   ycoord = NULL,   crsys = NULL,   buffer = NULL )"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Lake COMIDs — lc_get_comid","text":"dd Name data frame object.  Can simple data frame coordinate columns known CRS sf points data frame xcoord x coordinate column using raw data frame ycoord y coordinate column using raw data frame crsys epsg code using raw data frame buffer amount buffer use extend search waterbody (simply passed nhdplusTools::get_waterbodies)","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Lake COMIDs — lc_get_comid","text":"new sf data frame populated 'COMID' column","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Lake COMIDs — lc_get_comid","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_comid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Lake COMIDs — lc_get_comid","text":"","code":"if (FALSE) { # \\dontrun{  dd <- data.frame(x = c(-89.198,-114.125,-122.044), y = c(45.502,47.877,43.730))  comids <- lc_get_comid(dd, xcoord='x',                        ycoord='y', crsys=4269)  dd <- data.frame(x = c(-89.198,-114.125,-122.044), y = c(45.502,47.877,43.730)) |>     sf::st_as_sf(coords = c('x', 'y'), crs = 4326)     comids <- lc_get_comid(dd)  } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LakeCat data — lc_get_data","title":"Get LakeCat data — lc_get_data","text":"Function return LakeCat metrics using StreamCat API.  function allows user get specific metric data aggregated area interest, returned comid(s), hydroregion(s), state(s), county(ies).","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LakeCat data — lc_get_data","text":"","code":"lc_get_data(   comid = NULL,   metric = NULL,   aoi = NULL,   showAreaSqKm = NULL,   showPctFull = NULL,   state = NULL,   county = NULL,   region = NULL,   conus = NULL,   countOnly = NULL )"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LakeCat data — lc_get_data","text":"comid Return metric information specific COMIDs. Can comma-delimited list, character vector, object can coerced comma-delimited list paste. One comid, county, state, region required unless conus='true'. Syntax: comid=<comid1>,<comid2> metric Name(s) metrics query. Must character string comma-delimited list metrics. case-sensitive. Syntax: name=<name1>,<name2> aoi Specify area interest described metric. default, available areas interest given metric returned. Case-sensitive. Syntax: areaOfInterest=<value1>,<value2> Values: catchment|watershed| showAreaSqKm Return area square kilometers given area interest. default value false. Values: true|false showPctFull Return pctfull dataset. default value false. Values: true|false state Return metric information COMIDs within specific state. Use state's abbreviation query given state. One comid, county, state, region required unless conus='true'. specified valid, comid county ignored. Case-sensitive. Syntax: state=<state1>,<state2> county Return metric information COMIDs within specific county. Users must use FIPS code, county name, way disambiguate counties. One comid, county, state, region required unless conus='true'. specified valid, comid ignored. Syntax: county=<county1>,<county1> region Return metric information COMIDs within specified hydroregion. Hydroregions specified using full name .e. 'Region01', 'Region03N', 'Region10L' One comid, county, state, region required unless conus='true'. specified valid, comid, county, state ignored. Case-sensitive. Syntax: region=<regionid1>,<regionid2> conus Return COMIDs conterminous United States. Character string (case-sensitive) logical. default value false. true, comid, county, state, region ignored. Values: true|false countOnly Return CSV containing row count (ROWCOUNT) column count (COLUMNCOUNT) server expects return request. default value false. Values: true|false","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LakeCat data — lc_get_data","text":"tibble desired StreamCat metrics. data missing rows given metric, column metric exist. data missing rows, specified NA.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get LakeCat data — lc_get_data","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LakeCat data — lc_get_data","text":"","code":"if (FALSE) { # \\dontrun{ df <- lc_get_data(comid='23794487', aoi='cat', metric='fert')  df <- lc_get_data(metric='pcturbmd2006', aoi='ws', comid='24083377')  df <- lc_get_data(metric='pctgrs2006', aoi='ws', region='Region01')  df <- lc_get_data(metric='pctwdwet2006', aoi='ws', county='41003')  df <- lc_get_data(metric='pcturbmd2006', aoi='ws', comid='24083377', showAreaSqKm=FALSE, showPctFull=TRUE)  df <- lc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='23783629,23794487,23812618')  df <- lc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid=c('23783629','23794487','23812618'))  df <- lc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='23783629,23794487,23812618', countOnly=TRUE)    } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LakeCat Metric Names — lc_get_metric_names","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"Function filter LakeCat metrics metrics category, area interest, dataset year. Use `lc_get_params(categories)` `lc_get_params(datasets)` see valid category dataset options","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"","code":"lc_get_metric_names(category = NULL, aoi = NULL, year = NULL, dataset = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"category Filter LakeCat metrics based metric category aoi Filter LakeCat metrics based area interest year Filter LakeCat metrics based particular year years dataset Filter LakeCat metrics based dataset name","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"dataframe merics description match filter criteria","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_metric_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LakeCat Metric Names — lc_get_metric_names","text":"","code":"if (FALSE) { # \\dontrun{ metrics <- lc_get_metric_names(category='Natural') metrics <- lc_get_metric_names(category = c('Anthropogenic','Natural'), aoi=c('Cat','Ws'))} # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get LakeCat Parameters — lc_get_params","title":"Get LakeCat Parameters — lc_get_params","text":"Function return available LakeCat parameters using StreamCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get LakeCat Parameters — lc_get_params","text":"","code":"lc_get_params(param = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get LakeCat Parameters — lc_get_params","text":"param List available parameters API following options: name, areaofInterest, region, state, county.  State county return data frame includes FIPS codes, names state abbreviations Syntax: param=<value1>,<value2> Values: name|area","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get LakeCat Parameters — lc_get_params","text":"list current LakeCat values given parameter","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get LakeCat Parameters — lc_get_params","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get LakeCat Parameters — lc_get_params","text":"","code":"if (FALSE) { # \\dontrun{ params <- lc_get_params(param='variable_info') params <- lc_get_params(param='metric_names') params <- sc_get_params(param='categories') params <- lc_get_params(param='aoi') params <- lc_get_params(param='state') params <- lc_get_params(param='county') params <- sc_get_params(param='datasets') } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NLCD Data — lc_nlcd","title":"Get NLCD Data — lc_nlcd","text":"Function specifically retrieve NLCD metrics given year using StreamCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NLCD Data — lc_nlcd","text":"","code":"lc_nlcd(   year = \"2019\",   aoi = NULL,   comid = NULL,   showAreaSqKm = NULL,   showPctFull = NULL,   countOnly = NULL )"},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NLCD Data — lc_nlcd","text":"year Years(s) NLCD metrics query. valid NLCD years accepted (.e. 2001, 2004, 2006, 2008, 2011, 2013, 2016, 2019) Syntax: year=<year1>,<year2> aoi Specify area interest described metric. default, available areas interest given metric returned. Syntax: areaOfInterest=<value1>,<value2> Values: catchment|watershed|riparian_catchment|riparian_watershed|comid Return metric information specific COMIDs Syntax: comid=<comid1>,<comid2> showAreaSqKm Return area square kilometers given area interest. default value false. Values: true|false showPctFull Return pctfull dataset. default value false. Values: true|false countOnly Return CSV containing row count (ROWCOUNT) column count (COLUMNCOUNT) server expects return request. default value false. Values: true|false","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NLCD Data — lc_nlcd","text":"tibble desired StreamCat metrics","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get NLCD Data — lc_nlcd","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/lc_nlcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NLCD Data — lc_nlcd","text":"","code":"if (FALSE) { # \\dontrun{  df <- lc_nlcd(comid='23783629', year='2019', aoi='ws')  df <- lc_nlcd(year='2016', aoi='cat', comid='23783629,23794487,23812618', showAreaSqKm=FALSE, showPctFull=TRUE)  df <- lc_nlcd(year='2016', aoi='cat', comid='23783629,23794487,23812618', countOnly=TRUE)  df <- lc_nlcd(year='2016, 2019', aoi='cat,ws', comid='23783629,23794487,23812618') } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup Full Metric Name — sc_fullname","title":"Lookup Full Metric Name — sc_fullname","text":"Function retrieve full metric name based short name using StreamCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup Full Metric Name — sc_fullname","text":"","code":"sc_fullname(metric = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup Full Metric Name — sc_fullname","text":"metric Short metric name Syntax: metric=value1 Values: metric","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup Full Metric Name — sc_fullname","text":"lookup full name given StreamCat metric","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lookup Full Metric Name — sc_fullname","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_fullname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup Full Metric Name — sc_fullname","text":"","code":"fullname <- sc_fullname(metric='clay')"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get COMIDs — sc_get_comid","title":"Get COMIDs — sc_get_comid","text":"Function return NHDPlusV2 COMIDS using either dataframe coordinates specified CRS sf object.  function generates vector COMID values user can pass sc_get_data function","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get COMIDs — sc_get_comid","text":"","code":"sc_get_comid(dd = NULL, xcoord = NULL, ycoord = NULL, crsys = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get COMIDs — sc_get_comid","text":"dd Name data frame object.  Can simple data frame coordinate columns known CRS sf points data frame xcoord x coordinate column using raw data frame ycoord y coordinate column using raw data frame crsys epsg code using raw data frame","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get COMIDs — sc_get_comid","text":"new sf data frame populated 'COMID' column","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get COMIDs — sc_get_comid","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_comid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get COMIDs — sc_get_comid","text":"","code":"if (FALSE) { # \\dontrun{  dd <- data.frame(x = c(-122.649,-100.348,-75.186,-106.675), y = c(45.085, 35.405,42.403,38.721))  comids <- sc_get_comid(dd, xcoord='x',                        ycoord='y', crsys=4269)  dd <- sf::st_point_on_surface(sf::read_sf(system.file(\"shape/nc.shp\", package=\"sf\")))  comids <- sc_get_comid(dd)                                    comids <- sc_get_comid(dd, xcoord='x',  ycoord='y', crsys=4269)  dd <- sf::read_sf(system.file(\"shape/nc.shp\", package=\"sf\")) comids <- sc_get_comid(dd)   } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get StreamCat data — sc_get_data","title":"Get StreamCat data — sc_get_data","text":"Function return StreamCat catchment watershed metrics using StreamCat API.  function allows user get specific metric data aggregated area interest, returned comid(s), hydroregion(s), state(s), county(ies).","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get StreamCat data — sc_get_data","text":"","code":"sc_get_data(   comid = NULL,   metric = NULL,   aoi = NULL,   showAreaSqKm = NULL,   showPctFull = NULL,   state = NULL,   county = NULL,   region = NULL,   conus = NULL,   countOnly = NULL )"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get StreamCat data — sc_get_data","text":"comid Return metric information specific COMIDs. Can comma-delimited list, character vector, object can coerced comma-delimited list paste. One comid, county, state, region required unless conus='true'. Syntax: comid=<comid1>,<comid2> metric Name(s) metrics query. Must character string comma-delimited list metrics, , metric='' metrics queried. case-sensitive. Syntax: name=<name1>,<name2> aoi Name(s) areas interest query. metric data given AOI, data returned AOI. Certain metrics AOI specified StreamCat need AOI specified ''. metrics include: BankfullDepth, BankfullWidth, ThalwagDepth (sic), CHEM_V2_1, CONN, HABT, HYD, ICI, IWI, TEMP, WettedWidth, prg_bmmi, mast, msst, mwst metrics. Case-sensitive. Syntax: areaOfInterest=<value1>,<value2> Values: cat|ws|catrp100|wsrp100|showAreaSqKm Return area square kilometers given area interest. default value false. Values: true|false showPctFull Return pctfull dataset. default value false. Values: true|false state Return metric information COMIDs within specific state. Use state's abbreviation query given state. One comid, county, state, region required unless conus='true'. specified valid, comid county ignored. Case-sensitive. Syntax: state=<state1>,<state2> county Return metric information COMIDs within specific county. Users must use FIPS code, county name, way disambiguate counties. One comid, county, state, region required unless conus='true'. specified valid, comid ignored. Syntax: county=<county1>,<county1> region Return metric information COMIDs within specified hydroregion. Hydroregions specified using full name .e. 'Region01', 'Region03N', 'Region10L' One comid, county, state, region required unless conus='true'. specified valid, comid, county, state ignored. Case-sensitive. Syntax: region=<regionid1>,<regionid2> conus Return COMIDs conterminous United States. Character string (case-sensitive) logical. default value false. true, comid, county, state, region ignored. Values: true|false countOnly Return CSV containing row count (ROWCOUNT) column count (COLUMNCOUNT) server expects return request. default value false. Values: true|false","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get StreamCat data — sc_get_data","text":"data frame StreamCat metrics. data missing rows given metric, column metric exist. data missing rows, specified NA.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get StreamCat data — sc_get_data","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get StreamCat data — sc_get_data","text":"","code":"if (FALSE) { # \\dontrun{ df <- sc_get_data(comid='179', aoi='cat', metric='fert')  df <- sc_get_data(metric='pctgrs2006', aoi='ws', region='Region01')  df <- sc_get_data(metric='pctwdwet2006', aoi='ws', county='41003')  df <- sc_get_data(metric='pcturbmd2006', aoi='wsrp100', comid='1337420')  df <- sc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='179,1337,1337420')  df <- sc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='179,1337,1337420', showAreaSqKm='true', showPctFull='true')  df <- sc_get_data(metric='pcturbmd2006,damdens', aoi='cat,ws', comid='179,1337,1337420', countOnly='true')  df <- sc_get_data(metric='thalwagdepth', comid='179,1337,1337420', aoi='other')  df <- sc_get_data(metric='thalwagdepth', comid=c('179','1337','1337420'), aoi='other')  df <- sc_get_data(comid='179', aoi='ws', metric='all')  } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get StreamCat Metric Names — sc_get_metric_names","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"Function filter StreamCat metrics metrics category, area interest, dataset year. Use `sc_get_params(categories)` `sc_get_params(datasets)` see valid category dataset options","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"","code":"sc_get_metric_names(category = NULL, aoi = NULL, year = NULL, dataset = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"category Filter StreamCat metrics based metric category aoi Filter StreamCat metrics based area interest year Filter StreamCat metrics based particular year years dataset Filter StreamCat metrics based dataset name","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"dataframe merics description match filter criteria","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_metric_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get StreamCat Metric Names — sc_get_metric_names","text":"","code":"if (FALSE) { # \\dontrun{ metrics <- sc_get_metric_names(category='Wildfire') metrics <- sc_get_metric_names(category = c('Deposition','Climate'), aoi=c('Cat','Ws')) metrics <- sc_get_metric_names(aoi='Other', dataset=c('Canal Density','Predicted Channel Widths Depths'))  } # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Get StreamCat Parameters — sc_get_params","title":"Get StreamCat Parameters — sc_get_params","text":"Function return available StreamCat parameters using StreamCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get StreamCat Parameters — sc_get_params","text":"","code":"sc_get_params(param = NULL)"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get StreamCat Parameters — sc_get_params","text":"param List available parameters API following options: name, areaofInterest, region, state, county.  State county return data frame includes FIPS codes, names state abbreviations Syntax: param=<value1>,<value2> Values: name|area","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get StreamCat Parameters — sc_get_params","text":"list current StreamCat values given parameter","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get StreamCat Parameters — sc_get_params","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_get_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get StreamCat Parameters — sc_get_params","text":"","code":"if (FALSE) { # \\dontrun{ params <- sc_get_params(param='variable_info') params <- sc_get_params(param='metric_names') params <- sc_get_params(param='categories') params <- sc_get_params(param='aoi') params <- sc_get_params(param='state') params <- sc_get_params(param='county') params <- sc_get_params(param='datasets')} # }"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Get NLCD Data — sc_nlcd","title":"Get NLCD Data — sc_nlcd","text":"Function retrieve NLCD metrics given year using StreamCat API.","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get NLCD Data — sc_nlcd","text":"","code":"sc_nlcd(   year = \"2019\",   comid = NULL,   aoi = NULL,   showAreaSqKm = NULL,   showPctFull = NULL,   state = NULL,   county = NULL,   region = NULL,   conus = NULL,   countOnly = NULL )"},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get NLCD Data — sc_nlcd","text":"year Years(s) NLCD metrics query. valid NLCD years accepted (.e. 2001, 2004, 2006, 2008, 2011, 2013, 2016, 2019) Syntax: year=<year1>,<year2> comid Return metric information specific COMIDs Syntax: comid=<comid1>,<comid2> aoi Specify area interest described metric. default, available areas interest given metric returned. Syntax: areaOfInterest=<value1>,<value2> Values: catchment|watershed|riparian_catchment|riparian_watershed|showAreaSqKm Return area square kilometers given area interest. default value false. Values: true|false showPctFull Return pctfull dataset. default value false. Values: true|false state Return metric information COMIDs within specific state. Use state's abbreviation query given state. Syntax: state=<state1>,<state2> county Return metric information COMIDs within specific county. Users must use FIPS code, county name, way disambiguate counties. Syntax: county=<county1>,<county1> region Return metric information COMIDs within specified hydroregion. Syntax: region=<regionid1>,<regionid2> conus Return COMIDs conterminous United States. default value false. Values: true|false countOnly Return CSV containing row count (ROWCOUNT) column count (COLUMNCOUNT) server expects return request. default value false. Values: true|false","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get NLCD Data — sc_nlcd","text":"tibble desired StreamCat metrics","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get NLCD Data — sc_nlcd","text":"Marc Weber","code":""},{"path":"https://usepa.github.io/StreamCatTools/reference/sc_nlcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get NLCD Data — sc_nlcd","text":"","code":"if (FALSE) { # \\dontrun{ df <- sc_nlcd(year='2001', aoi='cat',comid='179,1337,1337420')  df <- sc_nlcd(year='2001', aoi='ws', region='Region01')  df <- sc_nlcd(year='2001', aoi='ws', region='Region01', countOnly=TRUE)  df <- sc_nlcd(year='2001', aoi='ws', region='Region01', showAreaSqKm=FALSE, showPctFull=TRUE)  df <- sc_nlcd(year='2001, 2006', aoi='cat,ws', comid='179,1337,1337420') } # }"},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-090","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.9.0","title":"StreamCatTools 0.9.0","text":"CRAN release: 2025-10-15 Addresses CRAN error generated tests Adds tryCatch handling functions calling web services order fail gracefully produce errors Adds documentation vignettes two new functions added package","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-080","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.8.0","title":"StreamCatTools 0.8.0","text":"CRAN release: 2025-10-09 Added code coverage package Added two new functions - sc_get_metric_names lc_get_metric_names make metric names descriptions searchable slightly updated parameters sc_get_params lc_get_params functions sc_get_data lc_get_data now accept vectors well comma- separated strings metric, state, county region parameters","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-070","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.7.0","title":"StreamCatTools 0.7.0","text":"CRAN release: 2025-09-15 Updated sc_get_data lc_get_data pass parameters POST request body rather header, providing ability pass lengthy lists COMIDS requests Fixed bug package tests causing error running testthat","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-060","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.6.0","title":"StreamCatTools 0.6.0","text":"CRAN release: 2025-09-02 Added functionality sc_get_data lc_get_data accommodate large numbers (e.g. > 700) COMIDs header POST request","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-050","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.5.0","title":"StreamCatTools 0.5.0","text":"Overhauled sc_get_data lc_get_data functions able pull metrics StreamCat LakeCat area interest Updated sc_get_data lc_get_data able pass hundreds COMIDs time function parameter error call server Updated sc_get_params lc_get_params now return variable information, well just metric names full names, return tables state county abbreviations, names FIPS codes","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-040","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.4.0","title":"StreamCatTools 0.4.0","text":"Overhauled functions use new api.epa.gov endpoints StreamCat described swagger documentation Streamlined sc_get_data lc_get_data requests httr2 Adopted functionality package functions use Oracle ORDs Database REST API rather previous JAVA REST service","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-030","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.3.0","title":"StreamCatTools 0.3.0","text":"Incorporated POST requests httr2 requests deal many COMIDs requests Added documentation vignette working LakeCat data package","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-020","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.2.0","title":"StreamCatTools 0.2.0","text":"lc_get_data lc_get_params Changed lifecycle stable","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-0119002","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.1.1.9002","title":"StreamCatTools 0.1.1.9002","text":"Fixed sc_get_data pass COMIDs function robustly Added sc_nlcd helper function easily grab NLCD based metrics StreamCat Updated package documentation","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-0119001","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.1.1.9001","title":"StreamCatTools 0.1.1.9001","text":"API publicly released package works now everyone (just inside EPA network)","code":""},{"path":"https://usepa.github.io/StreamCatTools/news/index.html","id":"streamcattools-0119000","dir":"Changelog","previous_headings":"","what":"StreamCatTools 0.1.1.9000","title":"StreamCatTools 0.1.1.9000","text":"Added NEWS.md file track changes package.","code":""}]
